name: <Native> Linux

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  CONAN_USER_HOME : ${{ github.workspace }}/.conan

# github.head_ref is only defined on pull_request events
concurrency:
  group: ${{ github.workflow }}-${{ github.actor }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  compile_linux:
    name: "Linux-Ubuntu"
    if: 
      (! contains(github.event.pull_request.body, '[X] does not change any runtime related code or build configuration'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: actions/setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: 11
          platform: x64
      - name: install conan
        run: python -m pip install conan && conan -v
      - name: config clang profile
        run: |
          conan profile new clang
          conan profile update settings.os=Linux clang 
          conan profile update settings.compiler=clang clang
          conan profile update settings.compiler.version=11 clang
          conan profile update settings.arch=x86_64 clang
          conan profile update settings.build_type=Release clang
          conan profile show clang
      - name: install third party
        run: |
          mkdir -p ${{ github.workspace }}/native/conan/build
          cd ${{ github.workspace }}/native/conan/build
          conan install ${{ github.workspace }}/native/conan -pr clang --build=missing -j install_info.json
          ls ${{ github.workspace }}/native/conan/build
          zip -r libs.zip ./bin ./lib
          ls -l
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ github.workspace }}/native/conan/build/libs.zip
          asset_name: libs.zip
          asset_content_type: application/zip
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libs
          path: ${{ github.workspace }}/native/conan/build/libs.zip
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: info file
          path: ${{ github.workspace }}/native/conan/build/install_info.json
      #- run: conan profile new default --detect && conan profile show default && conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Download external libraries
        shell: bash
        run: |
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          git clone --branch $EXT_VERSION --depth 1 https://github.com/oahcy/engine-native-external native/external
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
      - name: Generate bindings
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          python3 -m pip install PyYAML==5.4.1 Cheetah3
          python3 ./native/tools/tojs/genbindings.py
          rm ./native/tools/tojs/userconf.ini
      - name: Install dependencies
        run: |
          sudo apt install libx11-dev -y
          sudo apt install libsndio-dev -y
          sudo apt install ninja-build -y
      - name: Compile
        env:
          COCOS_ENGINE_DEV: 1
        run: |
          NATIVE_ROOT=$GITHUB_WORKSPACE/native
          echo "Compiling Linux ... "
          cd  $GITHUB_WORKSPACE/templates/linux
          mkdir -p build-linux/proj
          touch build-linux/proj/cfg.cmake
          echo "set(CC_USE_VULKAN OFF)" >> build-linux/proj/cfg.cmake
          echo "set(CC_USE_GLES2 OFF)" >> build-linux/proj/cfg.cmake
          echo "set(CC_USE_GLES3 ON)" >> build-linux/proj/cfg.cmake
          echo "set(CC_USE_METAL OFF)" >> build-linux/proj/cfg.cmake
          echo "set(USE_WEBSOCKET_SERVER OFF)" >> build-linux/proj/cfg.cmake
          echo "set(CMAKE_CXX_STANDARD_REQUIRED ON)" >> build-linux/proj/cfg.cmake
          echo "set(USE_PHYSICS_PHYSX OFF)" >> build-linux/proj/cfg.cmake
          mkdir build-linux/assets

          RES_DIR=$GITHUB_WORKSPACE/templates/linux/build-linux
          cd build-linux
          cmake ../ -GNinja -DRES_DIR=$RES_DIR -DCOCOS_X_PATH=$NATIVE_ROOT
          set +e
          cmake --build . 